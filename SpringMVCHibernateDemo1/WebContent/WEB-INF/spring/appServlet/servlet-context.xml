<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
   		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

   <mvc:annotation-driven/>
   
   <!-- to denote images and resources are present in this folder/location -->
    <mvc:resources mapping="/images/**" location="/images/" />
    
     <!-- Internationalization Language-->
    <beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    <beans:property name="basename" value="WEB-INF/messages" />
</beans:bean>

<!-- Used instead of using hibernate.cfg.xml file to contain details of the datatabase -->
<beans:bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" /> 


	
	<resources mapping="/resources/**" location="/resources/" />

	<!-- this is called when any controller returns ModelAndView object -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

<!-- Connection Pooling -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="${jdbc.driverClassName}" />
		<beans:property name="url"
			value="${jdbc.databaseurl}" />
		<beans:property name="username" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />
	</beans:bean>
	
	

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<!--  No Hibernate SessionFactory used, instead Spring Orm Module is used for integrating Hibernate and Spring -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		
		<!-- Another bean with id datasource is referrred -->
		<beans:property name="dataSource" ref="dataSource" />
		
		<!-- Annotated Classes are referred using this property. AnnotatedClasses are list property-->
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.pack.form.Customer</beans:value>
			</beans:list>
		</beans:property>
		
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop> <!-- Display internal Sql query generated by Hibernate -->
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="customerDAO" class="com.pack.dao.CustomerDaoImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<!-- id should match with the qualifier name for CustomerController class -->
	<beans:bean id="customerService" class="com.pack.service.CustomerServiceImpl">
		<beans:property name="customerDao" ref="customerDAO"></beans:property> <!--  Injection done so no need of autowiring -->
	</beans:bean>
	
	<!-- All classes are present in this package so context component scan is used -->
	<context:component-scan base-package="com.pack" />
	
	<!-- Annotation for Transaction management will be used. AOP functionality. Transaction will be used by BEAN.-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!--  -->
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>


</beans:beans>
